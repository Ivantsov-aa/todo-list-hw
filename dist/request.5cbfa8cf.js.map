{"version":3,"sources":["js/request.js"],"names":["getTaskApi","getTask","axios","get","then","response","status","compareDate","createTaskApi","tasks","forEach","task","createTask","post","data","deleteTaskApi","id","deleteTask","delete","updateTaskApi","updateTask","put","dateChange","dateApi","lastDateModified","dateChangeLS"],"mappings":";;;;;;;;;;;;AAAO,SAASA,UAAT,GAAsB;AACzB,MAAMC,OAAO,GAAGC,KAAK,CAACC,GAAN,CAAU,6BAAV,CAAhB;AACA,SAAOF,OAAO,CAACG,IAAR,CAAa,UAACC,QAAD,EAAc;AAC9B,QAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AACxBC,MAAAA,WAAW;AACd;AACJ,GAJM,CAAP;AAKH;;AAEM,SAASC,aAAT,GAAyB;AAC5BC,EAAAA,KAAK,CAACC,OAAN,CAAc,UAAAC,IAAI,EAAI;AAClB,QAAMC,UAAU,GAAGV,KAAK,CAACW,IAAN,CAAW,6BAAX,EAA0CF,IAA1C,CAAnB;AACA,WAAOC,UAAU,CAACR,IAAX,CAAgB,UAACC,QAAD,EAAc;AACjC,aAAOA,QAAQ,CAACS,IAAhB;AACH,KAFM,CAAP;AAGH,GALD;AAMH;;AAEM,SAASC,aAAT,CAAuBC,EAAvB,EAA2B;AAC9B,MAAMC,UAAU,GAAGf,KAAK,CAACgB,MAAN,uCAA4CF,EAA5C,EAAnB;AACA,SAAOC,UAAU,CAACb,IAAX,CAAgB,UAACC,QAAD,EAAc;AACjC,WAAOA,QAAQ,CAACS,IAAhB;AACH,GAFM,CAAP;AAGH;;AAEM,SAASK,aAAT,CAAuBH,EAAvB,EAA2B;AAC9BP,EAAAA,KAAK,CAACC,OAAN,CAAc,UAAAC,IAAI,EAAI;AAClB,QAAMS,UAAU,GAAGlB,KAAK,CAACmB,GAAN,uCAAyCL,EAAzC,GAA+CL,IAA/C,CAAnB;AACA,WAAOS,UAAU,CAAChB,IAAX,CAAgB,UAACC,QAAD,EAAc;AACjC,aAAOA,QAAQ,CAACS,IAAhB;AACH,KAFM,CAAP;AAGH,GALD;AAMH;;AAEM,SAASQ,UAAT,GAAsB;AACzB,MAAIC,OAAO,GAAGrB,KAAK,CAACmB,GAAN,CAAU,4BAAV,EAAwC;AAClDG,IAAAA,gBAAgB,EAAEC;AADgC,GAAxC,CAAd;AAGA,SAAOF,OAAO,CAACnB,IAAR,CAAa,UAAAC,QAAQ,EAAI;AAC5B,WAAOA,QAAQ,CAACS,IAAhB;AACH,GAFM,CAAP;AAGH;;AAEM,SAASP,WAAT,GAAuB;AACtB,MAAIgB,OAAO,GAAGrB,KAAK,CAACC,GAAN,CAAU,4BAAV,CAAd;AACA,SAAOoB,OAAO,CAACnB,IAAR,CAAa,UAAAC,QAAQ,EAAI;AAC5B,QAAIoB,YAAY,GAAGpB,QAAQ,CAACS,IAAT,CAAcU,gBAAjC,EAAmD;AAC/CF,MAAAA,UAAU;AACVd,MAAAA,aAAa,GAFkC,CAG/C;AACH;AACJ,GANM,CAAP;AAOP","file":"request.5cbfa8cf.js","sourceRoot":"..\\src","sourcesContent":["export function getTaskApi() {\r\n    const getTask = axios.get('http://localhost:3000/todos');\r\n    return getTask.then((response) => {\r\n        if (response.status == 200) {\r\n            compareDate();\r\n        }\r\n    })\r\n}\r\n\r\nexport function createTaskApi() {\r\n    tasks.forEach(task => {\r\n        const createTask = axios.post('http://localhost:3000/todos', task);\r\n        return createTask.then((response) => {\r\n            return response.data;\r\n        })\r\n    })\r\n}\r\n\r\nexport function deleteTaskApi(id) {\r\n    const deleteTask = axios.delete(`http://localhost:3000/todos/${id}`);\r\n    return deleteTask.then((response) => {\r\n        return response.data;\r\n    })\r\n}\r\n\r\nexport function updateTaskApi(id) {\r\n    tasks.forEach(task => {\r\n        const updateTask = axios.put(`http://localhost:3000/todos/${id}`, task);\r\n        return updateTask.then((response) => {\r\n            return response.data;\r\n        })\r\n    })\r\n}\r\n\r\nexport function dateChange() {\r\n    let dateApi = axios.put('http://localhost:3000/info', {\r\n        lastDateModified: dateChangeLS\r\n    })\r\n    return dateApi.then(response => {\r\n        return response.data;\r\n    })\r\n}\r\n\r\nexport function compareDate() {\r\n        let dateApi = axios.get('http://localhost:3000/info')\r\n        return dateApi.then(response => {\r\n            if (dateChangeLS > response.data.lastDateModified) {\r\n                dateChange();\r\n                createTaskApi();\r\n                // updateTaskApi(task.id);\r\n            }\r\n        })\r\n}"]}